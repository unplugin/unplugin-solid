// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`rolldown > test/fixtures/basic.tsx > dev = false 1`] = `
"// basic.js
import { template } from "solid-js/web";

//#region test/fixtures/basic.tsx
var _tmpl$ = /* @__PURE__ */ template(\`<div>Hello World\`);
const Foo = _tmpl$();
var basic_default = Foo;

//#endregion
export { basic_default as default };"
`;

exports[`rolldown > test/fixtures/basic.tsx > dev = true 1`] = `
"// basic.js
import { template } from "solid-js/web";

//#region test/fixtures/basic.tsx
var _tmpl$ = /* @__PURE__ */ template(\`<div>Hello World\`);
const Foo = _tmpl$();
var basic_default = Foo;

//#endregion
export { basic_default as default };"
`;

exports[`rolldown > test/fixtures/syntax.tsx > dev = false 1`] = `
"// syntax.js
import { createComponent, delegateEvents, template } from "solid-js/web";
import { Suspense, createEffect, createSignal, onCleanup, onMount } from "solid-js";

//#region test/fixtures/syntax.tsx
var _tmpl$ = /* @__PURE__ */ template(\`<button>+\`);
function Foo(props) {
	const [count, setCount] = createSignal(0);
	onMount(() => {
		console.log("mounted");
		onCleanup(() => {
			console.log("unmounted");
		});
	});
	createEffect(() => {
		console.log("count:", count());
	});
	return [
		"Children:",
		createComponent(Suspense, {
			fallback: "loading...",
			get children() {
				return props.children;
			}
		}),
		(() => {
			var _el$ = _tmpl$();
			_el$.$$click = () => setCount(count() + 1);
			return _el$;
		})()
	];
}
var syntax_default = Foo;
delegateEvents(["click"]);

//#endregion
export { syntax_default as default };"
`;

exports[`rolldown > test/fixtures/syntax.tsx > dev = true 1`] = `
"// syntax.js
import { createComponent, delegateEvents, template } from "solid-js/web";
import { Suspense, createEffect, createSignal, onCleanup, onMount } from "solid-js";

//#region test/fixtures/syntax.tsx
var _tmpl$ = /* @__PURE__ */ template(\`<button>+\`);
function Foo(props) {
	const [count, setCount] = createSignal(0);
	onMount(() => {
		console.log("mounted");
		onCleanup(() => {
			console.log("unmounted");
		});
	});
	createEffect(() => {
		console.log("count:", count());
	});
	return [
		"Children:",
		createComponent(Suspense, {
			fallback: "loading...",
			get children() {
				return props.children;
			}
		}),
		(() => {
			var _el$ = _tmpl$();
			_el$.$$click = () => setCount(count() + 1);
			return _el$;
		})()
	];
}
var syntax_default = Foo;
delegateEvents(["click"]);

//#endregion
export { syntax_default as default };"
`;
